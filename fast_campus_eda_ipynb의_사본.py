# -*- coding: utf-8 -*-
"""fast_campus_eda.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afxa532iqGbeC-R4fMOLc-LX6F7dcM4h
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

# 코랩
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
# 런타임 재시작
plt.rc('font', family='NanumBarunGothic')

url = '/content/drive/MyDrive/Colab Notebooks/파이널프로젝트_RAW_210329_210926.xlsx'
data = pd.read_excel(url)
df = pd.DataFrame(data)
df.head()

df.to_csv("/content/drive/MyDrive/Colab Notebooks/파이널프로젝트_RAW_210329_210926.csv")

df.shape

df.info()

df.isnull().sum()

df['category_title'].value_counts()

df['coupon_title'].value_counts()

df['category_title'].replace('데이터 사이언스','데이터사이언스',inplace=True)
df['category_title'].value_counts()

# 강의별 거래 횟수
plt.figure(figsize=(20,10))
sns.countplot(data=df, x='category_title')

# 강의별 거래액
plt.figure(figsize=(20,10))
sns.barplot(x='category_title',y='transaction_amount', data=df, estimator=np.sum)

# 강의별 평균 거래액
plt.figure(figsize=(20,10))
sns.barplot(x='category_title',y='transaction_amount', data=df, estimator=np.mean)

pd.pivot_table(
    data=df,
    values='transaction_amount',
    columns='category_title',
    aggfunc=np.mean
)

df[df['category_title']=='교육']

#교육에 대한 데이터

df.groupby('category_title').mean()['transaction_amount'].sort_values(ascending=False)

df.head()

# 무조건 전처리 해야 하는 항목들
# type & state 컬럼

df['state'].value_counts()

df.loc[df['customer_id'] == 172881]

df.loc[df['customer_id'] == 478246]

df_com = df.loc[df['state'] == 'COMPLETED']
df_com.count()

"""## type 과 state 컬럼 고려한 전처리


"""

df['type'].value_counts(), df['state'].value_counts()

"""    state = order 
    옛날에 사용하던 양식으로 불필요한 데이터이기에 
    해당 로우 제외한다
"""

# state = order 제외
df_new = df[df['type'] != 'ORDER']
df_new.shape

# df_new['type'].unique()
df_new = df[(df['type'] == 'PAYMENT') |(df['type'] == 'REFUND')]

df_new['type'].unique()

df_new =df_new[(df_new['state'] == 'REQUESTED') | (df_new['state'] == 'COMPLETED')]
# df_new =df[df['state'] == 'COMPLETED'

df_new['state'].unique()

df_new['state'].value_counts()



df_new = df_new[~((df_new['coupon_discount_amount'] > df_new['sale_price']) & (df_new['transaction_amount'] > 0))]

df_new

df_marketing_st = df_new[(df_new['marketing_start_at'].isnull())]

df_new.columns

# sales price / transaction price 
# coupon price가 없는데, sales price != transaction price 인 경우, 포인트로 사용한 것이다. -> 
df_new['point_amount'] = df_new[df_new['coupon_discount_amount'].isnull()]['sale_price']-df_new[df_new['coupon_discount_amount'].isnull()]['transaction_amount']

df_new[~df_new['coupon_discount_amount'].isnull()]

# coupon 도 쓰고, point도 쓴 사람이 있나?
# coupon_discount_amount + transaction_amount != sale_price
df_new[(df_new['coupon_discount_amount']+df_new['transaction_amount'] != df_new['sale_price'])&(df_new['point_amount'].isnull()) & (df_new['coupon_discount_amount'] < df_new['sale_price'])]
# coupon_discount_amount가 실제 할인 금액이랑 다른 경우가 존재한다.





df_new[df_new['customer_id'] == 640697]

df_new[df_new['customer_id'] == 670896]

# 중복되는 customer_id 존재
df_new[df_new.duplicated('customer_id',keep=False)]

df_new['state'] in ['COMPLETED','CANCELLED']

df_cancel = df_new.loc[ (df_new['type'] =='PAYMENT') & (df_new['state']=='CANCELLED')]
df_cancel.head()

df_cancel.isnull().sum()

"""    type = PAYMENT
    state = COMPLETED

    확실하게 수익으로 잡힐 수 있는 것만 수익 데이터로써 활용한다.
"""

# 수익 
df_rev = df.loc[ (df['type'] =='PAYMENT') & (df['state']=='COMPLETED')]

df_rev.head()

df_rev.shape

